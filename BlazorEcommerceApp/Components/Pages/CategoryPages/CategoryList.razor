@page "/Category"
@inject ICategoryRepository _ICategoryRepository;
@inject IJSRuntime _js;


@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-1">
        <div class="card-header bg-black bg-gradient py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row">
                <div class="col-12 text-end">
                 <a href="category/create" class="btn btn-lg btn-secondary" style="width:250px;"><i class="bi bi-plus"></i>  Add New Category</a>
                </div>
                <p>Category List</p>
                @if (Categories.Any())
                {
        <table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var category in Categories)
        {
            <tr>
                <td>@category.Name</td>
                <td><a href= "@($"category/update/{category.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i>&nbsp; Edit</a></td>
                <td><button type="button" class="btn btn-danger"  @onclick="()=>HandleDelete(category.Id)"><i class="bi bi-trash"></i>&nbsp; Delete</button></td>
            </tr>
        }
    </tbody>
        </table>
                }
            </div>
        </div>
    </div>
    <BlazorEcommerceApp.Components.Shared.BSModel OnModalConfirmation="ConfirmDelete_Click"></BlazorEcommerceApp.Components.Shared.BSModel>
}
@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    private int DeleteCategoryId { get; set; } = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesAsync();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        Categories = await _ICategoryRepository.GetAllAsync();
    }
    private async Task HandleDelete(int id)
    {
        DeleteCategoryId = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }
    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _js.InvokeVoidAsync("HideConfirmationModal");

        if(isConfirmed && DeleteCategoryId!=0)
        {
            var result = await _ICategoryRepository.DeleteAsync(DeleteCategoryId);
            if (result)
                _js?.TostrSuccess("Category Deleted Successfully");
            else
                _js?.TostrError("Error encountered while deleting");

            await LoadCategoriesAsync();
        }
        DeleteCategoryId = 0;
        IsProcessing = false;
    }
}
